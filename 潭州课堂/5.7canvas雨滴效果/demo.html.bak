<!doctype html>
<html lang="en">
 <head>
  <meta charset="UTF-8">
  <meta name="Generator" content="EditPlus®">
  <meta name="Author" content="">
  <meta name="Keywords" content="">
  <meta name="Description" content="">
  <title>Document</title>
  <style>
	body{
		margin:0px;
	}
	canvas{
		display:block;
		background-color:#000000;
		width:100%;
		height:100%
	}
  </style>
 </head>
 <body>
	<canvas class='rain'></canvas>
	<script>
		/*
			程序员的能力
				1：语言，语法，规则
				2：程序思维
					项目分解
						功能模块
							逻辑模块
				1.让canvas元素宽高和浏览器一致
					1.1 获取canvas元素
					1.2 获取浏览器宽高 BOM接口
					1.3 设置canvas元素的宽高
					1.4 当浏览器窗口宽高发生变化时在重新设置宽高
				2.如何使用canvas绘制图形
					arc 圆形
					rect 矩形
					fill 实心
					stroke 空心
				3.如何实现canvas动画
				4.画雨滴
					4.1 位置不同
					4.2 速度不同
					4.3 雨滴绽放的位置不一样
		*/
		var canvas=document.querySelector(".rain");//获取canvas元素
		var w,h;
		var aRain=[];//存放小雨滴
		~~function setSize(){
			window.onresize=arguments.callee;
			w=window.innerWidth;
			h=window.innerHeight;
			canvas.width=w;
			canvas.height=h;
		}();
	
		var canCon=canvas.getContext("2d");
		/*canCon.fillStyle="red";
		canCon.strokeStyle="red";
		canCon.arc(233,233,66,0,Math.PI*2);//构思画一个圆 圆心的位置 
		canCon.rect(233,233,66,66);//左上角坐标 矩形的宽高
		canCon.fill();
		canCon.stroke(); */
		/*var y=0;
		setInterval(function(){
			//canCon.beginPath();
			canCon.fillStyle="rgba(0,0,0,0.01)"
			canCon.fillRect(0,0,w,h);
			canCon.fillStyle="#3ff";
			canCon.fillRect(233,y++,2,10);
		},1000/60);//每隔t ms 就执行一次函数*/
		function random(min,max){//返回min到max之间的值
			return Math.random()*(max-min)+min;
		}
		function Rain(){};
		Rain.prototype={
			init:function(){
				this.x=random(0,w);
				this.y=0;
				this.color="#3ff";
				this.vy=random(1,3);//雨滴速度
				this.h=random(0.7*8,0.8*h);
				this.r=1;//水滴半径
				this.maxR=random(60,80);
			},
			draw:function(){
				if(this.y<this.h){
					canCon.fillStyle=this.color;
					canCon.fillRect(this.x,this.y,2,10);
				}
				else{
					canCon.beginPath();
					canCon.strokeStyle=this.color;
					canCon.arc(this.x,this.y,this.r,0,Math.PI*2);
					canCon.stroke();
				}
				
			},
			move:function(){
				if(this.y<this.h){
					this.y+=this.vy;
				}
				else{
					if(this.r<this.maxR){
						this.r++;
					}
					else{
						this.init();
					}
					
				}
				this.draw();
			}
		}
		function createRain(num){
			for(var i=0;i<num;i++){
				setTimeout(function(){
					var rain=new Rain();
					rain.init();
					rain.draw();
					aRain.push(rain);
				},500*i);//t ms之后执行一次函数
			}
		}
		createRain(20);

		setInterval(function(){
			canCon.fillStyle="rgba(0,0,0,0.05)";
			canCon.fillRect(0,0,w,h);
			for(var item of aRain){
				//for of :item:遍历数组中的每一个元素
				item.move();
			}
		},1000/60);
	</script>
 </body>
</html>
<!--
	动画：
		会动的画

		画是静态：

		1s 连续播放多张静态的画

		帧：60 描述物体他的状态必须要发生改变（位置，大小，颜色，形状...）

		1/60s
-->